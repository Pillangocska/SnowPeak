services:
  frontend:
    image: frontend
    container_name: frontend
    build:
      context: ./client
      args:
        - ANGULAR_PORT=${ANGULAR_PORT}
    restart: unless-stopped
    ports:
      - ${ANGULAR_PORT}:${ANGULAR_PORT}
    environment:
      BACKEND_URL: ${BACKEND_URL}
      RABBITMQ_WS_URL: ${RABBITMQ_WS_URL}
    volumes:
      - ./client/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend

  backend:
    image: backend
    container_name: backend
    build:
      context: ./backend
      args:
        - SPRING_BOOT_PORT=${SPRING_BOOT_PORT}
    restart: unless-stopped
    ports:
      - ${SPRING_BOOT_PORT}:${SPRING_BOOT_PORT}
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      KEYCLOAK_AUTH_SERVER_URL: ${KEYCLOAK_AUTH_SERVER_URL}
      SPRING_RABBITMQ_HOST: ${RABBITMQ_HOST}
      SPRING_RABBITMQ_PORT: ${RABBITMQ_AMQP_PORT}
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_USER}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
    env_file:
      - .env
    volumes:
      - ./config:/app/config
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_started
      keycloak:
        condition: service_started

  ski-lift-1:
    image: krisztianszenasi/ski-lift:latest
    container_name: ski-lift-1
    stdin_open: true
    tty: true
    environment:
      LIFT_ID: ${LIFT_1_ID}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      START_LAT: ${LIFT_1_START_LAT}
      START_LON: ${LIFT_1_START_LON}
      START_ELEVATION: ${LIFT_1_START_ELEVATION}
      END_LAT: ${LIFT_1_END_LAT}
      END_LON: ${LIFT_1_END_LON}
      END_ELEVATION: ${LIFT_1_END_ELEVATION}
      ARRIVAL_RATE: ${LIFT_1_ARRIVAL_RATE}
      LINE_SPEED: ${LIFT_1_LINE_SPEED}
      CARRIER_CAPACITY: ${LIFT_1_CARRIER_CAPACITY}
      CARRIER_SPACING: ${LIFT_1_CARRIER_SPACING}
      CARRIERS_LOADING: ${LIFT_1_CARRIERS_LOADING}
      MASTER_OPERATOR: ${LIFT_1_MASTER_OPERATOR}
      WORKER_OPERATORS: ${LIFT_1_WORKER_OPERATORS}
    depends_on:
      - rabbitmq

  ski-lift-2:
    image: krisztianszenasi/ski-lift:latest
    container_name: ski-lift-2
    stdin_open: true
    tty: true
    environment:
      LIFT_ID: ${LIFT_2_ID}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      START_LAT: ${LIFT_2_START_LAT}
      START_LON: ${LIFT_2_START_LON}
      START_ELEVATION: ${LIFT_2_START_ELEVATION}
      END_LAT: ${LIFT_2_END_LAT}
      END_LON: ${LIFT_2_END_LON}
      END_ELEVATION: ${LIFT_2_END_ELEVATION}
      ARRIVAL_RATE: ${LIFT_2_ARRIVAL_RATE}
      LINE_SPEED: ${LIFT_2_LINE_SPEED}
      CARRIER_CAPACITY: ${LIFT_2_CARRIER_CAPACITY}
      CARRIER_SPACING: ${LIFT_2_CARRIER_SPACING}
      CARRIERS_LOADING: ${LIFT_2_CARRIERS_LOADING}
      MASTER_OPERATOR: ${LIFT_2_MASTER_OPERATOR}
      WORKER_OPERATORS: ${LIFT_2_WORKER_OPERATORS}
    depends_on:
      - rabbitmq

  ski-lift-3:
    image: krisztianszenasi/ski-lift:latest
    container_name: ski-lift-3
    stdin_open: true
    tty: true
    environment:
      LIFT_ID: ${LIFT_3_ID}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      START_LAT: ${LIFT_3_START_LAT}
      START_LON: ${LIFT_3_START_LON}
      START_ELEVATION: ${LIFT_3_START_ELEVATION}
      END_LAT: ${LIFT_3_END_LAT}
      END_LON: ${LIFT_3_END_LON}
      END_ELEVATION: ${LIFT_3_END_ELEVATION}
      ARRIVAL_RATE: ${LIFT_3_ARRIVAL_RATE}
      LINE_SPEED: ${LIFT_3_LINE_SPEED}
      CARRIER_CAPACITY: ${LIFT_3_CARRIER_CAPACITY}
      CARRIER_SPACING: ${LIFT_3_CARRIER_SPACING}
      CARRIERS_LOADING: ${LIFT_3_CARRIERS_LOADING}
      MASTER_OPERATOR: ${LIFT_3_MASTER_OPERATOR}
      WORKER_OPERATORS: ${LIFT_3_WORKER_OPERATORS}
    depends_on:
      - rabbitmq

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    hostname: rabbitmq
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_logs:/var/log/rabbitmq
      - ./rabbitmq_enabled_plugins:/etc/rabbitmq/enabled_plugins
    ports:
      - "${RABBITMQ_AMQP_PORT}:${RABBITMQ_AMQP_PORT}"
      - "${RABBITMQ_MANAGEMENT_PORT}:${RABBITMQ_MANAGEMENT_PORT}"
      - "${RABBITMQ_WEBSOCKET_PORT}:${RABBITMQ_WEBSOCKET_PORT}"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    labels:
      kompose.service.type: ClusterIP
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 5s
      timeout: 3s
      retries: 5

  keycloak:
    build: .
    container_name: snow-peak-keycloak
    ports:
      - ${KEYCLOAK_EXTERNAL_PORT}:${KEYCLOAK_INTERNAL_PORT}
    environment:
      KC_DB: ${KC_DB}
      KC_DB_URL: ${KC_DB_URL}
      KC_DB_USERNAME: ${KEYCLOAK_POSTGRES_USER}
      KC_DB_PASSWORD: ${KEYCLOAK_POSTGRES_PASSWORD}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
    depends_on:
      - keycloak-postgres

  keycloak-postgres:
    container_name: keycloak-postgres
    image: postgres:15
    ports:
      - "${KEYCLOAK_POSTGRES_EXTERNAL_PORT}:${POSTGRES_PORT}"
    environment:
      POSTGRES_DB: ${KEYCLOAK_POSTGRES_DB}
      POSTGRES_USER: ${KEYCLOAK_POSTGRES_USER}
      POSTGRES_PASSWORD: ${KEYCLOAK_POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data

  db:
    image: postgres:14.1-alpine
    container_name: db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - '${POSTGRES_EXTERNAL_PORT}:${POSTGRES_PORT}'
    volumes:
      - app_postgres_data:/var/lib/postgresql/data

volumes:
  rabbitmq_data:
  rabbitmq_logs:
  postgres_data:
    driver: local
  app_postgres_data:
    driver: local
